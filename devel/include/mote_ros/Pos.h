// Generated by gencpp from file mote_ros/Pos.msg
// DO NOT EDIT!


#ifndef MOTE_ROS_MESSAGE_POS_H
#define MOTE_ROS_MESSAGE_POS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mote_ros
{
template <class ContainerAllocator>
struct Pos_
{
  typedef Pos_<ContainerAllocator> Type;

  Pos_()
    : act_x_pos()
    , act_y_pos()
    , true_x_pos()
    , true_y_pos()
    , traj_x_pos()
    , traj_y_pos()  {
    }
  Pos_(const ContainerAllocator& _alloc)
    : act_x_pos(_alloc)
    , act_y_pos(_alloc)
    , true_x_pos(_alloc)
    , true_y_pos(_alloc)
    , traj_x_pos(_alloc)
    , traj_y_pos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _act_x_pos_type;
  _act_x_pos_type act_x_pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _act_y_pos_type;
  _act_y_pos_type act_y_pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _true_x_pos_type;
  _true_x_pos_type true_x_pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _true_y_pos_type;
  _true_y_pos_type true_y_pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _traj_x_pos_type;
  _traj_x_pos_type traj_x_pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _traj_y_pos_type;
  _traj_y_pos_type traj_y_pos;





  typedef boost::shared_ptr< ::mote_ros::Pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mote_ros::Pos_<ContainerAllocator> const> ConstPtr;

}; // struct Pos_

typedef ::mote_ros::Pos_<std::allocator<void> > Pos;

typedef boost::shared_ptr< ::mote_ros::Pos > PosPtr;
typedef boost::shared_ptr< ::mote_ros::Pos const> PosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mote_ros::Pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mote_ros::Pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mote_ros::Pos_<ContainerAllocator1> & lhs, const ::mote_ros::Pos_<ContainerAllocator2> & rhs)
{
  return lhs.act_x_pos == rhs.act_x_pos &&
    lhs.act_y_pos == rhs.act_y_pos &&
    lhs.true_x_pos == rhs.true_x_pos &&
    lhs.true_y_pos == rhs.true_y_pos &&
    lhs.traj_x_pos == rhs.traj_x_pos &&
    lhs.traj_y_pos == rhs.traj_y_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mote_ros::Pos_<ContainerAllocator1> & lhs, const ::mote_ros::Pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mote_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mote_ros::Pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mote_ros::Pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mote_ros::Pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mote_ros::Pos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mote_ros::Pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mote_ros::Pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mote_ros::Pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d1a051bd496b12b36f5467e6e2f8b10";
  }

  static const char* value(const ::mote_ros::Pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d1a051bd496b12bULL;
  static const uint64_t static_value2 = 0x36f5467e6e2f8b10ULL;
};

template<class ContainerAllocator>
struct DataType< ::mote_ros::Pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mote_ros/Pos";
  }

  static const char* value(const ::mote_ros::Pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mote_ros::Pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] act_x_pos\n"
"float64[] act_y_pos\n"
"float64[] true_x_pos\n"
"float64[] true_y_pos\n"
"float64[] traj_x_pos\n"
"float64[] traj_y_pos\n"
;
  }

  static const char* value(const ::mote_ros::Pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mote_ros::Pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.act_x_pos);
      stream.next(m.act_y_pos);
      stream.next(m.true_x_pos);
      stream.next(m.true_y_pos);
      stream.next(m.traj_x_pos);
      stream.next(m.traj_y_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mote_ros::Pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mote_ros::Pos_<ContainerAllocator>& v)
  {
    s << indent << "act_x_pos[]" << std::endl;
    for (size_t i = 0; i < v.act_x_pos.size(); ++i)
    {
      s << indent << "  act_x_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.act_x_pos[i]);
    }
    s << indent << "act_y_pos[]" << std::endl;
    for (size_t i = 0; i < v.act_y_pos.size(); ++i)
    {
      s << indent << "  act_y_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.act_y_pos[i]);
    }
    s << indent << "true_x_pos[]" << std::endl;
    for (size_t i = 0; i < v.true_x_pos.size(); ++i)
    {
      s << indent << "  true_x_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.true_x_pos[i]);
    }
    s << indent << "true_y_pos[]" << std::endl;
    for (size_t i = 0; i < v.true_y_pos.size(); ++i)
    {
      s << indent << "  true_y_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.true_y_pos[i]);
    }
    s << indent << "traj_x_pos[]" << std::endl;
    for (size_t i = 0; i < v.traj_x_pos.size(); ++i)
    {
      s << indent << "  traj_x_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.traj_x_pos[i]);
    }
    s << indent << "traj_y_pos[]" << std::endl;
    for (size_t i = 0; i < v.traj_y_pos.size(); ++i)
    {
      s << indent << "  traj_y_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.traj_y_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTE_ROS_MESSAGE_POS_H
